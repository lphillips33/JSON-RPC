import java.io.IOException;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicHeader;
import org.apache.http.protocol.HTTP;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

public class HttpMethods {

	
	public HttpMethods() {
		//contructor
	}
	
	//change name of parameter to filter
		public  boolean buildMessageForViewStore(String itemToGet) throws ClientProtocolException, IOException {
			
			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			
			//Create the HTTP Post object
			HttpPost request = new HttpPost("/");
			
			//Add the headers
			request.addHeader("Host", "Logan's mac");
			request.addHeader("Content-Type", "application/json");
			//content type is set below 
			
			//Print out the headers
			System.out.println(request.getRequestLine().getMethod());
			System.out.println(request.getRequestLine().getUri());
			System.out.println(request.getRequestLine().getProtocolVersion());
			System.out.println(request.getRequestLine().toString());
			
			//Build the json object that will be the body of the http message
			JsonObject requestGetItems = new JsonObject();
			requestGetItems.addProperty("version", "1.0");
			requestGetItems.addProperty("methodName", "getItems");
				
			// Add that item we want as the parameter.  If the string is empty, we get back everything
			requestGetItems.addProperty("params", itemToGet);
			
			//put the json object into a string representation to check
			String json = gson.toJson(requestGetItems);
			System.out.println("JSON REPRESENTATION OF BODY MESSAGE: " + json);
			
		
			/*
			 * https://stackoverflow.com/questions/12364555/how-i-can-i-display
			 * -all-the-http-headers-when-using-the-defaulthttpclient
			 */
			
			// turn the array of headers into a list 
			
			List<Header> httpHeaders = Arrays.asList(request.getAllHeaders());
			
			// go through headers of our HttpPost request object
			for(Header header : httpHeaders) {
				System.out.println("HEADERS:" + header.getName() + ":" + header.getValue());
			}
			
			/*
			 * 
			 * https://stackoverflow.com/questions/7181534/http-post-using-json-in-java
			 */
			
			//Should it be HttpEntity entity?
			StringEntity entity = new StringEntity(requestGetItems.toString());
			entity.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, "application/json"));
			request.setEntity(entity);
			System.out.println("ENTITY:" + "" + request.getEntity());
					
			//Send the request
			
			/*
			 * https://stackoverflow.com/questions/14024625/
			 * how-to-get-httpclient-returning-status-code-
			 * and-response-body
			 *
			 * 
			 * https://stackoverflow.com/questions/16701521/how-
			 * can-i-tell-when-httpclient-execute-is-finished-fetching
			 * -all-content-in-a-l
			 * 
			 */
			
			InetAddress address = null;
			address = InetAddress.getByName("localhost");
			HttpHost target = new HttpHost(address);
					
			CloseableHttpClient httpclient = HttpClients.createDefault();
			
			//HttpClient httpclient = new DefaultHttpClient(); - DefaultHttpClient()
			
			HttpResponse httpResponse = httpclient.execute(target, request); 
			httpResponse.getStatusLine().getStatusCode();
			
			//server comes back, create an arraylist of items to display 
			
			 System.out.println("ITEMS FROM SERVER ARE COMING!!");
			
			//HANDLE RESPONSE
			
			 //Get the headers from the Server.  Put the Header array into an array list
			 List<Header> responseHeaders = Arrays.asList(httpResponse.getAllHeaders());
			
			 //Go through each response headers
			for(Header header : responseHeaders) {
				System.out.println("SERVER HEADERS:" + header.getName() + ":" + header.getValue());
			}
			
			System.out.println("THE ENTITY OF THE RESPONSE IS COMING!!!");
			
			String jsonString = httpResponse.getEntity().toString();
			
			// Convert the string to a JsonElement
			JsonElement element = gson.fromJson(jsonString, JsonElement.class);
			
			// Now we can convert the JsonElement to a JsonObject
			JsonObject jsonObj = element.getAsJsonObject();
			
			// Go through the server response.  Convert each Json object to an Item
			ArrayList<Item> itemsFromServer = parseGetItemsServerResponse(jsonObj);
			
			for(Item tempItem : itemsFromServer) {
				System.out.println("SERVER RESPONSE " + tempItem.toString());
			} 
			
			return true;
		}
		
		
		//ArrayList<Item> itemsToPurchase as parameter???
		public double buildMessageForPurchase(String name, int count) throws ClientProtocolException, IOException {
		
			System.out.println("PURCHASING ITEMS");
			
			Gson gson = new GsonBuilder().setPrettyPrinting().create();

			JsonObject requestPurchaseItems = new JsonObject();
			requestPurchaseItems.addProperty("version", "1.0");
			requestPurchaseItems.addProperty("methodName", "purchase");
			
			JsonArray purchaseArray = new JsonArray();
			
			//Add our parameters to a Json Array so we can add it to out object
			purchaseArray.add(name);
			purchaseArray.add(count);
			
			//Add json array to our object 
			requestPurchaseItems.add("params", purchaseArray);
			
			// put json object to string to check 
			String purchaseJson = gson.toJson(requestPurchaseItems);
			System.out.println(purchaseJson);
			
			// Send the http message
			
			HttpPost request = new HttpPost("/");
			
			//Add the headers
			request.addHeader("Host", "Logan's mac");
			request.addHeader("Content-Type", "application/json");
			
			// read the response back from the server.  Create a method that 
			// will return a json object to do this

			// HANDLE THE RESPONSE
			
			HttpResponse httpResponse = sendHttpMessage("localhost", request);
			httpResponse.getStatusLine().getStatusCode();
			
			//Get the headers from the Server.  Put the Header array into an array list
			 List<Header> responseHeaders = Arrays.asList(httpResponse.getAllHeaders());
			
			 //Go through each response headers
			for(Header header : responseHeaders) {
				System.out.println("SERVER HEADERS:" + header.getName() + ":" + header.getValue());
			}
		
			System.out.println("THE ENTITY OF THE RESPONSE IS COMING!!!");
			
			String jsonString = httpResponse.getEntity().toString();
			
			//convert to json object
			JsonElement element = gson.fromJson(jsonString, JsonElement.class);
			
			//Now we can convert the JsonElement to a JsonObject
			JsonObject jsonObj = element.getAsJsonObject();
			
			//Get the double
			double responseSuccess = jsonObj.getAsDouble();
			
			return responseSuccess;
		}
		
		public  ArrayList<Item> parseGetItemsServerResponse(JsonObject response) {
			
			Gson gson = new GsonBuilder().setPrettyPrinting().create();

			
			ArrayList<Item> itemsToShow = new ArrayList<Item>();
			
			JsonArray t = response.get("params").getAsJsonArray();
			
			// turn each object in the json array into an 'Item'.  Put each one in an array list 
			for(int i = 0; i < t.size(); i++) {
				//System.out.println(t.get(i).toString());
				
				Item tempItem = gson.fromJson(t.get(i).toString(), Item.class);
				
				//System.out.println(tempItem.toString());
				
				itemsToShow.add(tempItem);
			}
			
			return itemsToShow;
		}
		
		public HttpResponse sendHttpMessage(String ipAddress, HttpRequest request) throws ClientProtocolException, IOException {
			InetAddress address = null;
			address = InetAddress.getByName(ipAddress);
			HttpHost target = new HttpHost(address);		
			CloseableHttpClient httpclient = HttpClients.createDefault();
			HttpResponse httpResponse = httpclient.execute(target, request); 
			return httpResponse;
			
		}
	
	
	
}
